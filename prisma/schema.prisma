generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Data {
  id          String   @id @default(cuid())
  measurement String
  unit        Unit?    @relation(fields: [unitId], references: [id])
  unitId      Int?
  source      Source?  @relation(fields: [sourceId], references: [id])
  sourceId    Int?
  matter      Matter?  @relation(fields: [matterId], references: [id])
  matterId    Int?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

model Unit {
  id           Int     @id @default(autoincrement())
  name         String
  abbreviation String?
  data         Data[]
}

model Matter {
  id           Int     @id @default(autoincrement())
  name         String
  dataPoints         Data[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  datas         Data[]
  accounts      Account[]
  sessions      Session[]
  profile Profile?
  @@map(name: "users")
}

model Source {
  id           Int      @id @default(autoincrement())
  name         String?
  abbreviation String?
  image        String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  datas        Data[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}



model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

