generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Data {
  id                      String    @id @default(cuid())
  measurement             String?
  unitId                  String?
  sourceId                String?
  published               Boolean   @default(false)
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  authorId                String?
  locationId              String?
  measuredAt              DateTime  @default(now()) @map("measured_at")
  matterSlug              String?
  internallyGeneratedData Boolean   @default(false)
  internallyHostedData    Boolean   @default(false)
  title                   String?
  licenseId               String?
  meta                    Json?
  matterId                String?
  author                  User?     @relation(fields: [authorId], references: [id])
  license                 License?  @relation(fields: [licenseId], references: [id])
  location                Location? @relation(fields: [locationId], references: [id])
  matter                  Matter?   @relation(fields: [matterSlug], references: [slug])
  source                  Source?   @relation(fields: [sourceId], references: [id])
  unit                    Unit?     @relation(fields: [unitId], references: [id])
}

model Unit {
  id           String  @id @default(cuid())
  name         String
  abbreviation String?
  slug         String?
  data         Data[]
}

model Location {
  id      String  @id @default(cuid())
  name    String
  address String?
  long    String?
  lat     String?
  slug    String?
  data    Data[]
}

model Matter {
  id             String   @id @default(cuid())
  name           String
  abbreviation   String?
  slug           String   @unique
  description    String?
  glossaryMfeApi String?
  published      Boolean  @default(false)
  dataPoints     Data[]
  dataSources    Source[] @relation("MatterToSource")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  password           String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime? @map("email_verified")
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  password               String
  username               String?
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  datas                  Data[]
  profile                Profile?
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model Source {
  id             String   @id @default(cuid())
  name           String?
  abbreviation   String?
  image          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  dataHref       String?
  description    String?
  websiteHref    String?
  published      Boolean  @default(false)
  slug           String?  @unique
  datas          Data[]
  thingsMeasured Matter[] @relation("MatterToSource")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
}

model License {
  id           String  @id @default(cuid())
  name         String
  abbreviation String?
  description  String?
  slug         String  @unique
  url          String?
  dataPoints   Data[]
}
